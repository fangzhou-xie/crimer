get_apikey <- function() {
#' read system environment for API key
apikey <- as.character(Sys.getenv()["CRIMER_APIKEY"])
# TODO: edit the assertion message to be more informative
assertthat::assert_that(!is.na(apikey), msg = "API key not found")
apikey
}
#' Title
#'
#' @param endpoint (character) endpoint defined by (https://crime-data-explorer.fr.cloud.gov/api)
#'
#' @return NULL if encounter error in requesting,
#' otherwise tibble::tibble from result JSON
#' @export
#'
#' @examples
get_url <- function(endpoint) {
#' get result json from url by correspoinding endpoint
apikey <- get_apikey()
base_url <- "https://api.usa.gov/crime/fbi/sapi/%s?api_key=%s"
# paste("lsjf", "lsjfls", sep = "/")
url <- sprintf(base_url, endpoint, apikey)
res <- httr::GET(url)
if (!httr::http_error(res)) {
resjson <- jsonlite::fromJSON(httr::content(res, as="text"))
if (is.data.frame(resjson)) {
jstb <- tibble::as_tibble(resjson)
} else {
jstb <- tibble::as_tibble(resjson$results)
}
} else {
rescontent <- httr::content(res)
print(rescontent)
jstb <- NULL
}
jstb
}
#' Title
#'
#' @return a tibble::tibble of all agencied listed by the API
#' @export
#'
#' @examples \dontrun{
#' agencies <- get_agencies()
#' }
get_agencies <- function() {
#' get a tibble of agencies provided by API and their ori (identifier)
agencies <- get_url("api/agencies/list")
}
#' Title
#'
#' @param ori (character) agency ori, an identifier defined by API
#'
#' @return a tibble::tibble of pariticipation info of agencies
#' @export
#'
#' @examples \dontrun{
#' agency_par <- get_agency_participation("AK0010100")
#' }
get_agency_participation <- function(ori) {
#' ori = "AK0010100"
agency_participation <- get_url(paste("api/participation/agencies", ori, sep = "/"))
}
#' @param since
#' @param until
#' @param agency_ori
#'
#' @return
#' @export
#'
#' @examples \dontrun{
#' as <- get_agency_srs("AK0010100", since = 1980, until = 2018)
#' }
get_agency_srs <- function(agency_ori = NULL, since = NULL, until = NULL) {
#' get crime data by agency ori identifier
stringf <- sprintf("/api/summarized/agencies/%s/offenses/%s/%s", agency_ori, since, until)
agency_srs <- get_url(stringf)
}
agency_par <- get_agency_participation("AK0010100")
View(agency_par)
as <- get_agency_srs("AK0010100", since = 1979, until = 2018)
as <- get_agency_srs("AK0010100", since = 1985, until = 2018)
dplyr::filter(agency_par, datayear == "1984" or datayear == "1985")
dplyr::filter(agency_par, datayear == "1984" | datayear == "1985")
dplyr::filter(agency_par, data_year == "1984" | data_year == "1985")
#'
#' @return NULL if encounter error in requesting,
#' otherwise tibble::tibble from result JSON
#' @export
#'
#' @examples \dontrun{
#' agencies <- get_url("api/agencies/list")
#' # this is equivalent to get_agencies() function
#' # in fact, get_agencies() is defined by doing so
#' }
get_url <- function(endpoint) {
#' get result json from url by correspoinding endpoint
apikey <- get_apikey()
base_url <- "https://api.usa.gov/crime/fbi/sapi/%s?api_key=%s"
# paste("lsjf", "lsjfls", sep = "/")
url <- sprintf(base_url, endpoint, apikey)
res <- httr::GET(url)
assertthat::assert_that(!httr::http_error(res), msg = httr::content(res))
if (is.data.frame(resjson)) {
jstb <- tibble::as_tibble(resjson)
} else {
jstb <- tibble::as_tibble(resjson$results)
}
jstb
}
as <- get_agency_srs("AK0010100", since = 1985, until = 2018)
#'
#' @return NULL if encounter error in requesting,
#' otherwise tibble::tibble from result JSON
#' @export
#'
#' @examples \dontrun{
#' agencies <- get_url("api/agencies/list")
#' # this is equivalent to get_agencies() function
#' # in fact, get_agencies() is defined by doing so
#' }
get_url <- function(endpoint) {
#' get result json from url by correspoinding endpoint
apikey <- get_apikey()
base_url <- "https://api.usa.gov/crime/fbi/sapi/%s?api_key=%s"
# paste("lsjf", "lsjfls", sep = "/")
url <- sprintf(base_url, endpoint, apikey)
res <- httr::GET(url)
assertthat::assert_that(!httr::http_error(res), msg = httr::content(res))
resjson <- jsonlite::fromJSON(httr::content(res, as="text"))
if (is.data.frame(resjson)) {
jstb <- tibble::as_tibble(resjson)
} else {
jstb <- tibble::as_tibble(resjson$results)
}
jstb
}
as <- get_agency_srs("AK0010100", since = 1985, until = 2018)
View(as)
as
as <- get_agency_srs("AK0010100", since = 1984, until = 2018)
res
?httr::content
#'
#' @return NULL if encounter error in requesting,
#' otherwise tibble::tibble from result JSON
#' @export
#'
#' @examples \dontrun{
#' agencies <- get_url("api/agencies/list")
#' # this is equivalent to get_agencies() function
#' # in fact, get_agencies() is defined by doing so
#' }
get_url <- function(endpoint) {
#' get result json from url by correspoinding endpoint
apikey <- get_apikey()
base_url <- "https://api.usa.gov/crime/fbi/sapi/%s?api_key=%s"
# paste("lsjf", "lsjfls", sep = "/")
url <- sprintf(base_url, endpoint, apikey)
res <- httr::GET(url)
assertthat::assert_that(!httr::http_error(res), msg = httr::content(res, as = "text"))
resjson <- jsonlite::fromJSON(httr::content(res, as="text"))
if (is.data.frame(resjson)) {
jstb <- tibble::as_tibble(resjson)
} else {
jstb <- tibble::as_tibble(resjson$results)
}
jstb
}
as <- get_agency_srs("AK0010100", since = 1984, until = 2018)
agencies <- get_agencies()
View(agencies)
any <- get_agenct_srs("NY330SS00", since = 1984, until = 2018)
asny <- get_agency_srs("NY330SS00", since = 1984, until = 2018)
asny <- get_agency_srs("NY330SS00", since = 1985, until = 2018)
colnames(agencies)
View(agency_par)
View(asny)
View(agencies)
is.character(c("1","2"))
is.character(NULL)
map_agency_crime <- function(ori, since, until) {
stringf <- sprintf("/api/summarized/agencies/%s/offenses/%s/%s",
agency_ori, since, until)
agency_crime <- get_url(stringf)
}
length(c("1","2"))
length("1231")
c("1","2")
"1231"
#' @param agency_ori (character vector), denoting the agency ori, could be looked up by get_agencies()
#'        default: NULL, which means getting all agencies
#'
#' @return
#' @export
#'
#' @examples \dontrun{
#' as <- get_agency_crime("AK0010100", since = 1984, until = 2018)
#' asny <- get_agency_crime("NY330SS00", since = 1985, until = 2018)
#' }
get_agency_crime <- function(agency_ori = NULL, since = NULL, until = NULL) {
#' get crime data by agency ori identifier
#' since >= 1985, until <= 2018 (https://www.ucrdatatool.gov/)
#' national crime estimates from 1960 through the most recent year available
#' state crime estimates from 1960 through the most recent year available
#' city and county crime counts from 1985 through the most recent year available
library(dplyr)
if (is.null(since)) since <- 1985
if (is.null(until)) {
if (!is.null(agency_ori)) {
ag_par <- get_agency_participation(agency_ori)
until <- max(ag_par$data_year)
} else {
until <- 2018
}
}
if (is.null(agency_ori)) {
# default to get all agencies
agencies <- get_agencies()
oris <- agencies %>%
select(ori) %>%
pull()
} else {
# provide a vector of oris
oris <- agency_ori
}
agency_crime <- purrr::map(oris,
map_agency_crime,
since,
until) %>%
bind_rows()
agency_crime
}
get_agency_crime(c("AK0010300", "AK0011300"))
map_agency_crime("AK0010300", 1985, 2018)
map_agency_crime <- function(agency_ori, since, until) {
stringf <- sprintf("/api/summarized/agencies/%s/offenses/%s/%s",
agency_ori, since, until)
agency_crime <- get_url(stringf)
}
map_agency_crime("AK0010300", 1985, 2018)
map_agency_crime <- function(agency_ori, since, until) {
stringf <- sprintf("/api/summarized/agencies/%s/offenses/%s/%s",
agency_ori, since, until)
agency_crime <- get_url(stringf)
agency_crime
}
map_agency_crime("AK0010300", 1985, 2018)
get_agency_crime(c("AK0010300", "AK0011300"))
#' Title
#'
#' @param ori (character) agency ori, an identifier defined by API
#'
#' @return a tibble::tibble of pariticipation info of agencies
#' @export
#'
#' @examples \dontrun{
#' agency_par <- get_agency_participation("AK0010100")
#' }
get_agency_participation <- function(ori) {
#' ori = "AK0010100"
agency_participation <- get_url(paste("api/participation/agencies", ori, sep = "/"))
agency_participation
}
get_agency_crime(c("AK0010300", "AK0011300"))
is.null(c("AK0010300", "AK0011300"))
#' @param agency_ori (character vector), denoting the agency ori, could be looked up by get_agencies()
#'        default: NULL, which means getting all agencies
#'
#' @return
#' @export
#'
#' @examples \dontrun{
#' as <- get_agency_crime("AK0010100", since = 1984, until = 2018)
#' asny <- get_agency_crime("NY330SS00", since = 1985, until = 2018)
#' }
get_agency_crime <- function(agency_ori = NULL, since = NULL, until = NULL) {
#' get crime data by agency ori identifier
#' since >= 1985, until <= 2018 (https://www.ucrdatatool.gov/)
#' national crime estimates from 1960 through the most recent year available
#' state crime estimates from 1960 through the most recent year available
#' city and county crime counts from 1985 through the most recent year available
library(dplyr)
if (is.null(since)) since <- 1985
if (is.null(until)) {
# if (!is.null(agency_ori)) {
#   ag_par <- get_agency_participation(agency_ori)
#   until <- max(ag_par$data_year)
# } else {
until <- 2018
# }
}
if (is.null(agency_ori)) {
# default to get all agencies
agencies <- get_agencies()
oris <- agencies %>%
select(ori) %>%
pull()
} else {
# provide a vector of oris
oris <- agency_ori
}
agency_crime <- purrr::map(oris,
map_agency_crime,
since,
until) %>%
bind_rows()
agency_crime
}
get_agency_crime(c("AK0010300", "AK0011300"))
#' @param merge_agency_characteristics (bool), If TRUE, then merge with agency characteristics,
#' otherwise not
#'
#' @return
#' @export
#'
#' @examples \dontrun{
#' as <- get_agency_crime("AK0010100", since = 1984, until = 2018)
#' asny <- get_agency_crime("NY330SS00", since = 1985, until = 2018)
#' }
get_agency_crime <- function(agency_ori = NULL, since = NULL, until = NULL,
merge_agency_characteristics = TRUE) {
#' get crime data by agency ori identifier
#' since >= 1985, until <= 2018 (https://www.ucrdatatool.gov/)
#' national crime estimates from 1960 through the most recent year available
#' state crime estimates from 1960 through the most recent year available
#' city and county crime counts from 1985 through the most recent year available
library(dplyr)
if (is.null(since)) since <- 1985
if (is.null(until)) {
# if (!is.null(agency_ori)) {
#   ag_par <- get_agency_participation(agency_ori)
#   until <- max(ag_par$data_year)
# } else {
until <- 2018
# }
}
# get agency characteristics
agencies <- get_agencies()
if (is.null(agency_ori)) {
# default to get all agencies
oris <- agencies %>%
select(ori) %>%
pull()
} else {
# provide a vector of oris
oris <- agency_ori
}
agency_crime <- purrr::map(oris,
map_agency_crime,
since,
until) %>%
bind_rows()
if (merge_agency_characteristics) {
agency_crime <- agency_crime %>%
left_join(., agencies, by = "ori")
}
agency_crime
}
get_agency_crime(c("AK0010300", "AK0011300"), merge_agency_characteristics = T)
devtools::load_all(".")
devtools::document()
?.
devtools::document()
?get_url
devtools::document()
?get_url
devtools::document()
?get_url
?get_agency_crime
devtools::document()
?get_agency_crime
devtools::document()
?get_agency_crime
devtools::use_vignette("crimer-vignette")
devtools::use_vignette("crimer")
usethis::use_vignette("crimer-vignette")
Sys.Date()
devtools::document()
devtools::document()
